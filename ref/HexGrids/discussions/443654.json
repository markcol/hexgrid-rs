[
  {
    "Id": "1043575",
    "ThreadId": "443654",
    "Html": "Hi - I have been through the code etc .... It lokks great in the example app .. but what I think it really needs is a guide on how to incorporate it into your own project - ie how to use the utilities if you already have your own game and want to incorporate the functionality.\r<br />\n<br />\nSomething like an outline of do.. this - do that.\r<br />\n<br />\nWhat is there seems really good but wihtout any docs its very difficult to use.<br />\n",
    "PostedDate": "2013-05-14T15:11:32.26-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1043666",
    "ThreadId": "443654",
    "Html": "The project <strong>HexGridExample</strong> is intended to be a tutorial on integrating the utilities into a game project. <br />\n<br />\nThe interfaces <em>HexGridExample.IMapBoard</em> and <em>HexGridExample.IMapGridHex</em> extend the definition of Hex and Map to the additional functionality of a particular game. <br />\n<br />\nThe classes <strong>HexGridExample.MapBoard</strong> and <strong>HexGridExample.MapDisplay</strong> and the struct <strong>HexGridExample.GridHex</strong> implement these interfaces. I found it useful in my own game engine to separate the implementation of <em>IMapBoard</em> between the common functionality to all maps from the specific functionality for detail maps, as opposed to overview maps, and for <em>game functions</em> as opposed to <em>display functions</em>. Separating definition from implementation here is expected to facilitate the differences that would develop, for example, between the game itself and editors for maps and scenarios.<br />\n<br />\nThe class <strong>HexGridExample.TerrainMap</strong> illustrates how to build a map from a simple text-based definition, and display it in a pane.<br />\n<br />\nThe form <strong>HexGridExample.HexGridExample.cs</strong> illustrates a simple integration of the disparate parts in a game application.<br />\n<br />\nI would be delighted to answer specific questions that you might have. At this point many of my design decisions are now so obvious <strong>to me</strong>, that I may have even forgotten that I made them. Insightful questions would assist me to unravel this into useful documentation.<br />\n<br />\n<br />\n<br />\n.<br />\n",
    "PostedDate": "2013-05-14T23:55:04.657-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1043748",
    "ThreadId": "443654",
    "Html": "Many thanks for your answer.\r<br />\n<br />\nI will digest carefully what you have said here and look again at the code to see what I can do.\r<br />\n<br />\nI will come back with any specific questions when I have a greater understanding.<br />\n",
    "PostedDate": "2013-05-15T02:21:02.06-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1043765",
    "ThreadId": "443654",
    "Html": "I have just checked in modifications to <strong>HexGridExample</strong> that better reflect probable usage in a real game. I had taken some shortcuts in originally building the TerrainMap class that in retrospect were most likely confusing issues.\r<br />\n<br />\nThere are no changes to the library, just to the examples.<br />\n",
    "PostedDate": "2013-05-15T02:52:11.223-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1043920",
    "ThreadId": "443654",
    "Html": "OK I will download and take a look.\r<br />\n<br />\nPerhaps a _<strong>limited</strong> _example of something would help.\r<br />\n<br />\nLets say I have a map that is an image. I also have a hex grid that is also an image that lays over it.\r<br />\n<br />\nIf for this limited example I just wanted to use the library to feed in the hex dimensions and grid dimensions to use it simply to report back the hex co-ordinates under the mouse - is this something I could do ? What would I need to do to make that work.\r<br />\n<br />\nIf you can give me a pointer for something that basic I can work through it and get a better Idea of how it ties together.<br />\n",
    "PostedDate": "2013-05-15T07:59:13.547-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044124",
    "ThreadId": "443654",
    "Html": "Ha! It sounds like you are looking for a C# re-write of VASSAL. \r<br />\n;-)\r<br />\n<br />\nTaking <strong>TerrainMap.cs</strong> as the starting template, and using line numbers from last night's source code:<br />\n<ul>\n<li>The dimensions of the grid are currently set in the constructor for <em>MapDisplay</em> on line 47 of MapDisplay.cs.  Add another constructor that accepts over-riding values for the width and height. Make the setter for MapDisplay.GridSize public.</li>\n<li>Add a second parameter to <strong>TerrainMap.PaintMap</strong> of type <em>System.Drawing.Point</em> that specifies an offset to shift the grid by, in pixels. Apply it on line 56 of TerrainMap.cs, as part of the Translation Transfor for the Graphics object.</li>\n<li>Create a private field for TerrainMap to hold the grid offset.</li>\n<li>\nCreate a dialog box that allows the user to dynamically specify changes to grid size and offset, and then refreshes the display (of a portion of the map and grid).<br />\n</li>\n</ul>\nThat should get you started. Call back with any difficulties you encounter.<br />\n",
    "PostedDate": "2013-05-15T14:29:54.113-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044131",
    "ThreadId": "443654",
    "Html": "Many thanks - I will take a look.\r<br />\n<br />\nNot so Much VASSAL - more using it with hand drawn map boards to get away from the tiled look ...<br />\n",
    "PostedDate": "2013-05-15T14:57:41.127-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044426",
    "ThreadId": "443654",
    "Html": "Hi Pieter,\r<br />\n<br />\nI've been trying to leverage your code for a project I'm working on.  Your code is doing the exact two bits of functionality that I'm looking to implement right now.\r<br />\n<br />\nI'm struggling with finding a way to use your code in a generic way.\r<br />\n<br />\nFor example, in my application I've got a 100 x 100 map that represents a battlefield.  The field has a number of obstacles on it.  I'd like to be able to calculate a field of view for a unit on the battlefield by supplying your utility with the map information, the obstacle information, and the source unit's location.  What I want to get back from the method call is a list of hexes that are &quot;in view&quot; and/or &quot;in shadow&quot;.\r<br />\n<br />\nSimilarly, I'd like to present similar data to the utility to calculate the best path from a source to a destination hex.\r<br />\n<br />\nClearly, the application is performing these tasks but I can't seem to distill the contents of the code enough to retrieve just these bits of functionality.\r<br />\n<br />\nCheers,\r<br />\n<br />\nPaul<br />\n",
    "PostedDate": "2013-05-16T04:32:25.673-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044439",
    "ThreadId": "443654",
    "Html": "Hi - I think I would be correct in saying that this object in the library <strong>HexgridPanel.cs</strong> seems to be the central component that drives most of the base functionality of the system for map display ?<br />\n<br />\nFor example - it seems to be in this that the hotspot hex is set.<br />\n<br />\nMy issue would be that I am not using windows forms - but have built the map display etc with DirectX - so what I want to do is just use the various functions and not <br />\nthe map display part.<br />\n<br />\nSo essentially I think if not using windows forms as the base display its going to take a lot of &quot;Picking apart&quot; to get the required functionality ?<br />\n<br />\n It seems to me using the base windows form for constructing the map display is essential for use ?<br />\n<br />\nI guess in some kind of psuedo code what I thought I could do with this was ....<br />\n<br />\nNew mapboard()<br />\n<br />\nMapboard.hexorientation = pointy side up.<br />\nMapboard.size.vertical = 40<br />\nMapboard.size.horizontal = 40<br />\n<br />\nEvent MouseMove()<br />\ncoords  = get coords(mouse.x,mouse.y)<br />\n<br />\nThat kind of thing ... but it seems heavily tied to the winforms parts and is not a more generic library of functions.<br />\n",
    "PostedDate": "2013-05-16T04:57:43.887-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044772",
    "ThreadId": "443654",
    "Html": "<strong>DBeves:</strong>:<br />\n<br />\nYou are correct that everything revolves around <strong>HexgridPanel.cs</strong>; however, it should be possible to write your own equivalent. The key is to separate the <strong>Winforms</strong> functionality, extending <strong>Panel</strong>, from the <strong>Hexgrid</strong> functionality that implements the (to be defined) interface <strong>IHexGridPanel</strong>. I would certainly be interested in working with you on that, as it is a good generalization of the library. I will write more a bit later.<br />\n<br />\n<strong>Paul:</strong><br />\n<ol>\n<li>Are your obstacles more maze-like or more terrain-like? This affects whether <strong>MazeMap.cs</strong> or <strong>TerrainMap.cs</strong> is the better choice of template for your game.</li>\n<li>\nConsider Path-Finding: The method PathFinder.FindPath is where you obtain a Path from; the prototype is this:  \n\n<pre><code>public static IPath&lt;ICoordsCanon&gt; FindPath( \n  ICoordsCanon start, \n  ICoordsCanon goal,\n  Func&lt;ICoordsCanon,Hexside,int&gt; stepCost,\n  Func&lt;ICoordsCanon,int&gt;         range,\n  Func&lt;ICoordsCanon,bool&gt;        isOnBoard\n)</code></pre>\n\n<strong>FiindPath</strong> is deliberately a static method on <strong>PathFinder</strong>, so that it is not dependent on any local state information. Everythign it needs is supplied with the delegate parameters, 3 through 5. Any time the 5 parameters can be supplied to <strong>FindPath</strong>, it will properly return any best path that exists, as an <strong>IPath&lt;ICoordsUser&gt;</strong>. If you need assistance with creating the delegates, let me know and provide the ingredients available.\n</li>\n<li>\nConsider Field-of-View: The method <strong>FieldOfView.GetFieldOfView</strong> will return an IFieldOfView object when supplied wit parameters that satisfy this prototype:  \n\n<pre><code>public static IFieldOfView GetFieldOfView(\n  IBoard&lt;IGridHex&gt; board, \n  ICoordsUser origin, \n  int range, \n  FovTargetMode targetMode\n)</code></pre>\n\nTo invoke this method you will need to create a class around your grid definition that implements the interface <strong>IGridHex</strong>, and a class around your board definition that implements <strong>IBoard&lt;IGridHex&gt;</strong>. Again, I would be pleased to assist you with both of these tasks. \n</li>\n<li>\nA better design for the <strong>PathFInder.FindPath</strong> would be to pass in an object satisfying an interface definition, so I may work on that generality also for you.<br />\n</li>\n</ol>\n<strong>Update</strong>:   \n<br />\n<ol>\n<li>Note removal of this line from bullet (3), as I have verified that <strong>IBoard&lt;IGridHex</strong>&gt; is already a minimal pair of interfaces for FOV calculation :<br />\n <em>Likely both of these interface are bigger than actually needed, so we can also address that to improve the generality of the library.</em>  \n</li>\n<li>\nI have defined an interface <strong>INavigableBoard</strong> as shown below, which is the minimal interface for PathFinding. \n<pre><code>  public interface INavigableBoard {\n    int   StepCost(ICoordsCanon coords,Hexside hexside);\n    int   Range(ICoordsCanon hex, ICoordsCanon goal);\n    bool  IsOnBoard(ICoordsUser coords);\n  }</code></pre>\n\nThe preferred call into <strong>PathFinder</strong> to get a path is now this:\n<pre><code>  public static IPath&lt;ICoordsCanon&gt; FindPath(\n    ICoordsCanon    start,\n    ICoordsCanon    goal,\n    INavigableBoard board\n  );</code></pre>\n\nChange-Set #24780 contains these changes.\n</li>\n</ol>\n",
    "PostedDate": "2013-05-16T15:21:34.68-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044780",
    "ThreadId": "443654",
    "Html": "Paul: Please see consolidated note above.<br />\n",
    "PostedDate": "2013-05-16T15:30:34.173-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044795",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">I would say that my obstacles are more terrain like than they are maze like - but I'm not sure I see the distinction. As far as I can tell, the information needed for both concepts are identical. The only difference to me is what bits of hex\r\n information I may be interested in.\r\n<div><br>\r\n</div>\r\n<div>In a previous discussion I had mentioned that I struggled with the style of your coding. Not that it's wrong, it's just that I don't think in the same patterns.</div>\r\n<div><br>\r\n</div>\r\n<div>For example, the FindPath method you describe below. The idea of passing in three delegates doesn't make sense in my head. I would have assumed that there is a map already defined that the FindPath method is acting on. Each hex has an associated movement\r\n cost, which I would assume is the cost to move into the hex. Alternatively, each hex could have a predefined list of costs to move into each of the six adjacent hexes. The first concept is simpler, the second is more flexible. The third method, which is the\r\n one you chose, is extremely flexible but it means that I have to define delegates each time I want to use the method. It's not wrong, but I find that it removes much of the functionality from the method and externalizes it. Any programmer that wants to use\r\n the method now has to understand that they need to code up their own version of the method. I don't follow what the range and isOnBoard delegates do - so I wouldn't know what to pass in for them.<br>\r\n<div><br>\r\n</div>\r\n<div>Why does FoV accept a board as a parameter? Can it not leverage the same board that FindPath uses?</div>\r\n<div><br>\r\n</div>\r\n<div>I would think that, as a utility, I could set up my board details, modify the board details as needed, and then use methods like FindPath and FoV to act on it.</div>\r\n<div><br>\r\n</div>\r\n<div>Ideally, the utility (at least this part of it) should have no knowledge of or connection to the UI layer. If you consider the utility as a WCF service or even as an external DLL, the consumer shouldn't require this level of detailed knowledge. As much\r\n as possible, the interface needs to be simple and uncluttered. For me, there needs to be a clearer separation of concern.</div>\r\n<div><br>\r\n</div>\r\n<div>Also, I find the three types of coordinate classes completely confound me. I understand two of them, but the customCoordinates confuses me completely. As for the Canon Coordinates (which I believe are the true X, true Y coordinates) - I don't believe they\r\n ever need to be exposed. The consumer of the methods doesn't need to be aware of the transformation. Exposing the lot of them is confusing (at least to me). The way that you use them as overrides also confuses me.</div>\r\n<div><br>\r\n</div>\r\n<div>By the way - your usage of the language is phenomenal. It completely confuses me at times and it really slows down my understanding of the intention of the code, but as I waded through it I picked up a lot of small things that I didn't know could be done.</div>\r\n<div><br>\r\n</div>\r\n<div>Thanks for putting this application together and sharing it. It's really appreciated.</div>\r\n<div><br>\r\n</div>\r\n<div>Cheers,</div>\r\n<div><br>\r\n</div>\r\n<div>Paul</div>\r\n<div><br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-16T15:57:36.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044798",
    "ThreadId": "443654",
    "Html": "Hi - thanks for your reply.\r<br />\n<br />\nI guess I will need to take a look at HexgridPanel.cs and break that down to see how it could fit into a more generic model. \r<br />\n<br />\nFrom an initial look - it seems mostly related to translating the forms scrolling control attributes to a more generic method as this seems central to getting the coords correct .\r<br />\n<br />\nI will take a deeper look and perhaps post back some assumptions I would base new code on when I have done so.<br />\n",
    "PostedDate": "2013-05-16T16:00:59.56-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044815",
    "ThreadId": "443654",
    "Html": "__<strong>PaulMouchet wrote:</strong><br />\n<h2>For example, the FindPath method you describe below. The idea of passing in three delegates doesn't make sense in my head. I would have assumed that there is a map already defined that the FindPath method is acting on. Each hex has an associated movement cost, which I would assume is the cost to move into the hex. Alternatively, each hex could have a predefined list of costs to move into each of the six adjacent hexes. The first concept is simpler, the second is more flexible. The third method, which is the one you chose, is extremely flexible but it means that I have to define delegates each time I want to use the method. It's not wrong, but I find that it removes much of the functionality from the method and externalizes it. Any programmer that wants to use the method now has to understand that they need to code up their own version of the method. I don't follow what the range and isOnBoard delegates do - so I wouldn't know what to pass in for them.   Why does FoV accept a board as a parameter? Can it not leverage the same board that FindPath uses?   I would think that, as a utility, I could set up my board details, modify the board details as needed, and then use methods like FindPath and FoV to act on it.   Ideally, the utility (at least this part of it) should have no knowledge of or connection to the UI layer.__ </h2>\n*** Sorry about the bold above - forum tools are a bit poor.<br />\n<br />\nWell, I think I understand why the delegates are passed - and I think therin lies the conceptual difference in what a library does and what this code does.<br />\n<br />\nMy presumption for the delegates is that the system works top down - so at the top you have the mapdisplays - the delegates presumably mean that you can code completely different interpretations of those methods whilst maintaining the name and signature for the method. So the maze map for example could calculate the step cost completely differently from the display map  -  the methods get passed down through the system and the bottom layer just uses that result - of two methods that for all intent and purposes have the same signature - but work in completely different ways. I can understand the theory - but I think, and here I refer back to pauls comments, herin lies the conceptual difference - ie the base - utilities are not &quot;plug in&quot; in that respect but rely heavily on coding the top layer in a particular way - whereas a library would - as paul suggests be usable by setting up certain board parameters and passing those into whatever calls you wanted to use -  say Find path - or Map board would have a single override method for tracking the hotspot hex.<br />\n<br />\nIts a very interesting set of code - but I think I - and perhaps Paul conceptualized it somewhat differently when I first saw it.<br />\n<br />\nConceptually I initially looked at it as a library  independent of the  UI but I would now say its and entire system for creating hex maps and has to be taken as a whole in that respect - rather than as a pure utility library.<br />\n<br />\nAs Paul says - the code is a real enlightenment - there are all kinds of ways you work it that I would never have thought of doing.<br />\n",
    "PostedDate": "2013-05-16T16:35:39.187-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044817",
    "ThreadId": "443654",
    "Html": "@dbeves: I believe you and Paul are heading to the same place, from different origins. Reading through his Q's and my A's may help.<br />\n<br />\n@Paul:<br />\n<ol>\n<li><strong>ICustomCoords</strong> are for renumbering the board, such as to place the origin at the lower-left instead of the default upper-left. Perhaps it is a hang-over from the initial implementation for VASSAL, but then again it may be useful to someone.</li>\n<li>You may be correct re <strong>ICanonCoords</strong>; I will think on it, and test it in my Napoleonic engine. I know that it occasionally allows the client to optimize out a transformation, but it may be a micro-optimization. My Napoleonic engine has a big enough board to do some performance testing. <br />\n<strong>Edit</strong>: <em><strong>ICanonCoords</strong> is exposed to facilitate the writing of the <strong>StepCost</strong> function used by <strong>FindPath</strong></em>.</li>\n<li>re &quot;clearer separation of concern.&quot;: Yes! Guess why I am here helping you and <em>dbeves</em>; to get to that point faster than I can on my own. </li>\n<li>Yes, <strong>FOV</strong> and <strong>FindPath</strong> can use the same board; just implement both interfaces on the same class, the way <strong>MapBoard</strong> does in the example.</li>\n<li>\n<strong>FindPath</strong> is changed to accept an interface definition with the required methods, instead of the three delegates. Original method retained (but deprecated) for backwards compatibility.<br />\n</li>\n</ol>\nDid I miss anything?<br />\n",
    "PostedDate": "2013-05-16T16:37:43.47-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044818",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">Hi again,\r\n<div><br>\r\n</div>\r\n<div>I think you addressed all the items I mentioned.</div>\r\n<div><br>\r\n</div>\r\n<div>I'm going to take another look at things tomorrow. I find that even this brief exchange has helped my understanding.</div>\r\n<div><br>\r\n</div>\r\n<div>Thanks again,</div>\r\n<div><br>\r\n</div>\r\n<div>Paul<br>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-16T16:47:46.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044819",
    "ThreadId": "443654",
    "Html": "Hi pgeerkens,\r<br />\n<br />\nthanks for answering these Q's\r<br />\n<br />\nI think I have a better understanding of what the system is now - I think its a case of looking more closely at the code so I have a better understanding. Personally I would think the first task in morphing this into a genuine &quot;Library&quot; for hex based games is to separate the Win forms and UI elements - and make those into a defined set of data attributes that can be defined by someone using the library rather than it being tied so intrinsically to the winforms implementation.\r<br />\n<br />\nI will post back when I have had a deeper look and try and identify what I at least think those major items would be.<br />\n",
    "PostedDate": "2013-05-16T16:49:50.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1044823",
    "ThreadId": "443654",
    "Html": "<strong>@Paul &amp; @dbeves:</strong><br />\n<br />\nThe original inspiration for both FindPath and GetFieldOfView are the blog articles by Eric Lippert on both subjects. I have archived them in the documentation download, or you can find them at <a href=\"http://blogs.msdn.com/b/ericlippert/archive/tags/astar/\" rel=\"nofollow\">A-star</a> and at <a href=\"http://blogs.msdn.com/b/ericlippert/archive/tags/shadowcasting/\" rel=\"nofollow\">shadow-casting</a>. Both are completely independent of any particular board-drawing technology, though I may have obscured that a bit. Eric is a fun read, and he provides some design notes as he moves along. <br />\n<br />\nHowever, you both do have me wondering if two distinct libraries might be a better idea, one for completely generic utilities such as these two, and the other a basic <strong>WinForms</strong> implementation of a hex-grid Panel. I will think on that.<br />\n<br />\nAs for the code issue you have both alluded to; 8 months ago I had never written a single line of C# in my life. Lots of other languages including SQL, VB, C, Java, and some C++, but no C#. The use of delegates, lambdas, generics etc., comes with practice, and I was fortunate to get a lot of practices last fall.<br />\n<br />\nP.S. to  <em>dbeves</em>:<br />\n<br />\nUse single asterices for italics, not underline.<br />\n<strong>Update</strong>: Actually both work; I am no longer quite sure why your post above went wonky.<br />\n",
    "PostedDate": "2013-05-16T16:53:52.917-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045342",
    "ThreadId": "443654",
    "Html": "<strong>pgeerkens wrote:</strong><br />\n<blockquote>\n<strong>@Paul &amp; @dbeves:</strong><br />\n<br />\nThe original inspiration for both FindPath and GetFieldOfView are the blog articles by Eric Lippert on both subjects. I have archived them in the documentation download, or you can find them at <a href=\"http://blogs.msdn.com/b/ericlippert/archive/tags/astar/\" rel=\"nofollow\">A-star</a> and at <a href=\"http://blogs.msdn.com/b/ericlippert/archive/tags/shadowcasting/\" rel=\"nofollow\">shadow-casting</a>. Both are completely independent of any particular board-drawing technology, though I may have obscured that a bit. Eric is a fun read, and he provides some design notes as he moves along. <br />\n<br />\nHowever, you both do have me wondering if two distinct libraries might be a better idea, one for completely generic utilities such as these two, and the other a basic <strong>WinForms</strong> implementation of a hex-grid Panel. I will think on that.<br />\n<br />\nAs for the code issue you have both alluded to; 8 months ago I had never written a single line of C# in my life. Lots of other languages including SQL, VB, C, Java, and some C++, but no C#. The use of delegates, lambdas, generics etc., comes with practice, and I was fortunate to get a lot of practices last fall.<br />\n<br />\nP.S. to Paul:<br />\n<br />\nUse single asterices for italics, not underline.<br />\n</blockquote>\nI think two libraries would be a huge boon to a lot of people.\r<br />\n<br />\nTo get the functionality you have working here in an easy to implement set of libraries would be a massive input to any hex based game.<br />\n",
    "PostedDate": "2013-05-17T15:25:23.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045480",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">I have a few simple functions that I can offer to add to the library as well. Nothing magical, but I find them very handy.\r\n<div><br>\r\n</div>\r\n<div>Things like - distance between hexes, hexes in radius, etc. <span style=\"font-size:12pt\">\r\nThey may already be in the library, but I can't easily find them.</span></div>\r\n<div><br>\r\n</div>\r\n<div>PS to dbeves ... I'm not sure what you're referring to about asterices for italics. I don't think I've ever included any formatting in my responses unless hotmail is doing it for me.<br>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-18T07:00:26.867-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045489",
    "ThreadId": "443654",
    "Html": "@Paul:\r<br />\n<br />\nI am always interested in good ideas. The (Manhattan) distance between hexes is already in the library, as the <strong>ICoordsUser.Range(ICoordsUser)</strong> and <strong>ICoordsCanon.Range(ICoordsCanon)</strong> methods. I am not sure what you mean by &quot;hexes in radius&quot;.\r<br />\n<br />\nI have been developing two new classes, <strong>PathFinder2</strong> and <strong>Path2</strong> that remove all usages of <em>ICoordsCanon</em> from the interface, except for in <strong>StepCost</strong>. I expect to post it shortly. As the original classes will remain untouched, it will not be a breaking change for anyone else.\r<br />\n<br />\nI am thinking about how best to pull the library apart into two. I may have something by Monday.\r<br />\n<br />\nThe Post Scriptum about italics was meant to be addressed to <em>dbeves</em>, not you; I will correct the OP.<br />\n",
    "PostedDate": "2013-05-18T07:35:16.453-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045490",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">Ah, I see why I wasn't finding them. I don't consider a range function to be associated with a coordinate, although I can understand why you'd have put it there.\r\n<div><br>\r\n</div>\r\n<div>The &quot;hexes in radius&quot; method is perhaps a less than stellar name. Basically, for a given coordinate, I return a list of all the hexes within an area based on the radius.</div>\r\n<div><br>\r\n</div>\r\n<div>For example, if you pass the method coordinate(x,y) and a range of 1, it will return the immediate hexes surrounding coordinate(x,y). If you give supply a radius of 2, it will return the hexes that are within 2 hexes of the source coordinates (and so on).\r\n I have a similar method that only returns the rings. So for a radius of 3, it will return all the hexes that are 3 hexes away from the centre.</div>\r\n<div><br>\r\n</div>\r\n<div>I was recently looking at Amit's web page and he has similar functions available. His ring function is much more elegant than mine - but to be honest, I couldn't figure out how to implement his solution.<br>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-18T07:41:46.907-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045491",
    "ThreadId": "443654",
    "Html": "Ah! The Range functionality should be exposed directly on the GridHex interface. I will look at that.\r<br />\n<br />\nI also see hoe the <strong>HexesInRadius(ICoordsUser)</strong> could be useful. I will look at implementing that as an <strong>IEnumerable&lt;IGridHex&gt;</strong> later on this weekend.<br />\n",
    "PostedDate": "2013-05-18T07:57:32.62-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045494",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">Here is the code I have for the HexesInRadius and HexesAtRadius methods. Neither are as efficient as the could be, but I tend to go for the simple code first and then improve where necessary. So far, these functions perform quickly enough for\r\n my needs.\r\n<div><br>\r\n</div>\r\n<div>The &quot;Coordinates&quot; class is just a simple int X, Y pair.</div>\r\n<div><br>\r\n</div>\r\n<div>\r\n<div><span style=\"font-size:12pt\">public static List&lt;Coordinates&gt; HexesInRadius(Coordinates centre, int radius)</span></div>\r\n<div>\r\n<div>{</div>\r\n<div>var rtn = new List&lt;Coordinates&gt;();</div>\r\n<div>for (var rad = 1; rad &lt;= radius; rad&#43;&#43;)</div>\r\n<div>for (var x = rad * -1; x &lt;= rad; x&#43;&#43;)</div>\r\n<div>for (var y = rad * -1; y &lt;= rad; y&#43;&#43;)</div>\r\n<div>{</div>\r\n<div>var coord = new Coordinates(centre.X &#43; x, centre.Y &#43; y);</div>\r\n<div>var distance = DistanceBetweenHexes(centre, coord);</div>\r\n<div>if (distance == rad)</div>\r\n<div>rtn.Add(coord);</div>\r\n<div>//Console.WriteLine(string.Format(&quot;Radius {0}: x/y {1}/{2}: &quot;, rad, x, y));</div>\r\n<div>}</div>\r\n<div>return rtn;</div>\r\n<div>}</div>\r\n<div><br>\r\n</div>\r\n<div><span style=\"font-size:12pt\">public static List&lt;Coordinates&gt; HexesAtRadius(Coordinates centre, int radius)</span></div>\r\n<div>\r\n<div>{</div>\r\n<div>var rtn = new List&lt;Coordinates&gt;();</div>\r\n<div>for (var x = radius * -1; x &lt;= radius ; x&#43;&#43;)</div>\r\n<div>for (var y = radius * -1; y &lt;= radius ; y&#43;&#43;)</div>\r\n<div>{</div>\r\n<div>var coord = new Coordinates(centre.X &#43; x, centre.Y &#43; y);</div>\r\n<div>var distance = DistanceBetweenHexes(centre, coord);</div>\r\n<div>if (distance == rad)</div>\r\n<div>rtn.Add(coord);</div>\r\n<div>//Console.WriteLine(string.Format(&quot;Radius {0}: x/y {1}/{2}: &quot;, rad, x, y));</div>\r\n<div>}</div>\r\n<div><span style=\"font-size:12pt\">return rtn;</span></div>\r\n<div>}</div>\r\n<div><br>\r\n</div>\r\n<div>\r\n<div>public static int DistanceBetweenHexes(Coordinates startCoordinates, Coordinates endCoordinates)</div>\r\n<div>{</div>\r\n<div>var start = ConvertXyToOblique(startCoordinates);</div>\r\n<div>var end = ConvertXyToOblique(endCoordinates);</div>\r\n<div>return Math.Max(Math.Max(Math.Abs(end.Y - start.Y), Math.Abs(end.X - start.X)), Math.Abs((end.X - start.X) - (end.Y - start.Y)));</div>\r\n<div>}</div>\r\n</div>\r\n<br>\r\n</div>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-18T08:07:17.007-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045521",
    "ThreadId": "443654",
    "Html": "<strong>PaulMouchet wrote:</strong><br />\n<blockquote>\nI have a few simple functions that I can offer to add to the library as well. Nothing magical, but I find them very handy.   Things like - distance between hexes, hexes in radius, etc.  They may already be in the library, but I can't easily find them.   PS to dbeves ... I'm not sure what you're referring to about asterices for italics. I don't think I've ever included any formatting in my responses unless hotmail is doing it for me.<br />\n</blockquote>\nYes - it went a bit funky - actually all I did was press the italics button in the tools ...<br />\n",
    "PostedDate": "2013-05-18T11:31:59.32-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045522",
    "ThreadId": "443654",
    "Html": ".<br />\n",
    "PostedDate": "2013-05-18T11:36:53.377-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045723",
    "ThreadId": "443654",
    "Html": "Gentlemen,<br />\n<br />\nI have just completed a reworking of the utility into two DLL's, <strong>HexUtilities.dll</strong> and <strong>HexgridPanel.dll</strong>. The external interface of the former is summarized by the following interfaces, as well as an abstract implementation of <em>IMapBoard</em>. If you see anything missing (other the the requested <em>HexesInRadius()</em>, which is in progress), please let me know. I will post all the source code and binaries a bit later today.<br />\n<br />\nNote that the base classes <strong>Coords</strong> and <strong>HexCoords</strong> and the external facings of the functionality have ben reworked to completely eliminate the need for a (client) distinction between the different coordinate systems. It is now all buried behind* ICoords*.<br />\n<br />\n  namespace PG_Napoleonics.Utilities.HexUtilities {<br />\n<pre><code>public interface ICoords {\n  IntVector2D User    { get; }\n  IntVector2D Canon   { get; }\n  IntVector2D Custom  { get; }\n\n  int         Range(ICoords coords);\n  ICoords     StepOut(ICoords coords);\n  ICoords     StepOut(Hexside hexside);\n  string      ToString();\n\n  IEnumerable&lt;NeighbourCoords&gt; GetNeighbours(Hexside hexsides);\n}\n\npublic interface IMapBoard : IBoard&lt;IGridHex&gt; {\n  /// &lt;summary&gt;Distance in hexes out to which Field-of-View is to be calculated.&lt;/summary&gt;\n  int     FovRadius   { get; set; }\n  IFov    FOV         { get; }\n  ICoords GoalHex     { get; set; }\n  ICoords HotSpotHex  { get; set; }\n  IPath2  Path        { get; }\n  ICoords StartHex    { get; set; }\n}\npublic interface IBoard&lt;TGridHex&gt; : INavigableBoard, IFovBoard&lt;TGridHex&gt; \n  where TGridHex : class, IGridHex {\n  INavigableBoard     NavigableBoard { get; }\n  IFovBoard&lt;TGridHex&gt; FovBoard       { get; }\n}\n\n/// &lt;summary&gt;Interface required to make use of A-* Path Finding utility.&lt;/summary&gt;\npublic interface INavigableBoard {\n  /// &lt;summary&gt;The cost of leaving the hex with coordinates &lt;c&gt;coords&lt;/c&gt;through &lt;c&gt;hexside&lt;/c&gt;.&lt;/summary&gt;\n  int   StepCost(ICoords coords, Hexside hexside);\n  /// &lt;summary&gt;Returns an A_* heuristic value from a hexagonal Manhattan distance&lt;c&gt;range&lt;/c&gt;.&lt;/summary&gt;\n  int   Heuristic(int range);\n  /// &lt;summary&gt;Returns whether the hex with coordinates &lt;c&gt;coords&lt;/c&gt;is &quot;on board&quot;.&lt;/summary&gt;\n  bool  IsOnBoard(ICoords coords);\n}\n/// &lt;summary&gt;Structure returned by the A-* Path Finding utility.&lt;/summary&gt;\npublic interface IPath2 : IEnumerable&lt;ICoords&gt;\n{ \n  Hexside   LastDirection { get; }\n  ICoords   LastStep      { get; }\n  IPath2    PreviousSteps { get; }\n  int       Count         { get; }\n  uint      TotalCost     { get; }\n  uint      TotalSteps    { get; }\n}\n\n/// &lt;summary&gt;Interface required to make use of ShadowCasting Field-of-View calculation.&lt;/summary&gt;\n/// &lt;typeparam name=&quot;TGridHex&quot;&gt;&lt;/typeparam&gt;\npublic interface IFovBoard&lt;TGridHex&gt; where TGridHex : class, IGridHex {\n  /// &lt;summary&gt;The rectangular extent of the board's hexagonal grid, in hexes.&lt;/summary&gt;\n  Size     SizeHexes             { get; }\n  /// &lt;summary&gt;Returns the &lt;c&gt;TGridHex&lt;/c&gt; at location &lt;c&gt;coords&lt;/c&gt;.&lt;/summary&gt;\n  TGridHex this[ICoords  coords] { get; }\n\n  /// &lt;summary&gt;Returns whether the hex with coordinates &lt;c&gt;coords&lt;/c&gt;is &quot;on board&quot;.&lt;/summary&gt;\n  bool     IsOnBoard(ICoords coords);\n\n  /// &lt;summary&gt;Returns whether the hex at location &lt;c&gt;coords&lt;/c&gt; is passable.&lt;/summary&gt;\n  /// &lt;param name=&quot;coords&quot;&gt;&lt;/param&gt;\n  bool     IsPassable(ICoords coords);\n}\n/// &lt;summary&gt;Structure returned by the Field-of-View utility.&lt;/summary&gt;\npublic interface IFov {\n  /// &lt;summary&gt;True if the hex at coordinates &lt;c&gt;coords&gt; is visible in this field-of-view.&lt;/summary&gt;\n  bool this[ICoords coords] { get; }\n}</code></pre>\n\n}<br />\n",
    "PostedDate": "2013-05-19T11:32:38.203-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045750",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">I think this should work nicely.\r\n<div><br>\r\n</div>\r\n<div>However, I'm left wondering though why you'd want to have the FoV and Path elements as properties of the IMapBoard and not method parameters for FieldOfView and PathFinder methods.</div>\r\n<div><br>\r\n</div>\r\n<div>Regarding the IPath2 interface - does this need to be exposed by the utility? I would think the path being returned needs only be a list of coordinates for the path. Each coordinate might also include a cost, or alternatively, the path returned could be\r\n limited by a movement rate that is passed in as a parameter to the PathFinder method.<br>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-19T13:15:16.923-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045784",
    "ThreadId": "443654",
    "Html": "The <em>FoV</em> and <em>Path</em> elements of an <em>IMapBoard</em> are the <strong>currently displayed</strong> field-of-view and path respectively for that <em>MapBoard</em> instance. Perhaps that is still a bit of <strong>WinForms</strong> showing through, or perhaps not, I have not used WPF or other drawing technologies much yet.  The <em>PathFinder.FindPath()</em> and  <em>FieldOfVoiew.GetFieldOfView()</em> methods can always be invoked directly in order to obtain additional fields-of-view or paths.\r<br />\n<br />\nRegarding the Path2 interface: <br />\n<ol>\n<li><em>PreviousSteps</em> and <em>LastStep</em> are the path itself; they are required to allow a client to walk a path at a measured path without recalculating it each time.</li>\n<li><em>LastDirection</em>, is needed when drawing path arrow in each hex.</li>\n<li><em>TotalCost</em> is exposed to assist in AI calculations </li>\n<li><em>Count</em> was redundant, thank you; I have removed it; </li>\n<li><em>TotalSteps</em> is again exposed to allow an AI to analyze a path's efficiency (ie TotalCost / Range).</li>\n<li>If only the sequence of <em>ICoords</em> objects is required, then the base enumerator can be used to provide that, as here:  \r</li>\n</ol>\n<pre><code>    foreach (ICoords p in Path) {\n      // work with p here\n    }\n</code></pre>\n\nOne of the next pieces to build is the provision of a <em>road-map</em>, comprising pre-plotted paths between major junctions, to speed-up long paths on large maps.\r<br />\n<br />\nI am thinking of appropriate ways to generalize the concept of <strong>HexesInRadius</strong> that you and <em>dbeves</em> raised earlier. In terms of a base-level function, I am looking at something like this:<br />\n<pre><code>IEnumerable&lt;ICoords&gt; HexesInRadius ( int range, IntVector2 vectorStart, IntVector2 vectorEnd) {}</code></pre>\n\nor this<br />\n<pre><code>IEnumerable&lt;IGridHex&gt; HexesInRadius ( int range, IntVector2 vectorStart, IntVector2 vectorEnd) {}\n</code></pre>\n\nThis would generate a sequence of hexes between the given vectors, inclusive, at exactly the range specified. An overload would allow omitting <em>vectorEnd</em> in order to go full circle, and  a complementary method <code>HexesOutToRadius()</code> would loop out to the specified radius. Can you think of any difficulties with this design?<br />\n",
    "PostedDate": "2013-05-19T15:15:49.79-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045792",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">The differences between WinForms and WPF (Windows Presentation Foundation) are very similar in concept, but very different in implementation. However, the visual implementation strategy must be completely separated from the utility. Consider\r\n this - I may want to be able to present the visual component on a client app, or as a browser app, or as a phone app. If there is any visual integration into the utility, it becomes much harder to make use of.\r\n<div><br>\r\n</div>\r\n<div>Are you familiar with the concepts of MVC, MVVM and/or MVP? These methodologies are very similar in nature but have a slightly different method of implementation. For the purpose of this discussion, I'll go into MVP because it's the most obvious method.</div>\r\n<div><br>\r\n</div>\r\n<div>In MVP the application is divided up into 3 distinct areas of concern. The Model, which is the business of the application. The View, which is the component that renders the information in a user-friendly format. The Presenter, which manages the communications\r\n between the Model and the Presentation. Under this method, the view has no concept of the model and the model has no concept of the view. The presenter takes Data Transfer Objects from the model and manipulates them to create Data Transfer Objects that it\r\n will present to the View. The view has no business knowledge at all - it's only job is to present the information provided by the presenter. Now, in truth, this is rarely this clear cut - but it's the model that the designer needs to strive for when putting\r\n together the application architecture.</div>\r\n<div><br>\r\n</div>\r\n<div>If you keep the utility a &quot;pure model&quot;, it will make it easier to consume and easier to understand.</div>\r\n<div><br>\r\n</div>\r\n<div>The description of the path2 interface helped to clear up it's purpose significantly. I'm not suggesting to reduce it's content, but consider this - the idea of the PathFinder is to provide a path, which is at a minimum a list of directions or a list of\r\n coordinates. Providing the additional data is meaningful, but it seems as though it is mostly meaningful if you want to render something visually. Consider your statement for point 2 &quot;LastDirection is needed when drawing ...&quot;</div>\r\n<div><br>\r\n</div>\r\n<div>If I have a list of Coordinates and Costs I can calculate all of the other items with ease.</div>\r\n<div><br>\r\n</div>\r\n<div>I'm not sure what TotalSteps adds to the result. Is it different from being the count of coordinates? Is it a running total of the costs to move into each hex? I don't think the AI needs any of this data since the PathFinder is the AI in this case. It's\r\n already rendered it's decision. What more could the consumer do with the data?</div>\r\n<div><br>\r\n</div>\r\n<div>I'm not sure that adding a second vector to the HexesInRadius function is a good idea. They represent two very distinct pieces of logic. What if the second vector is at a different distance than the radius? What set of data would it return?</div>\r\n<div><br>\r\n</div>\r\n<div>Also, for my own understanding, what is the difference between a vector and a coordinate? How does it apply to the hexes in a circle with a radius of X? To me, a vector implies direction and I'm not sure how that fits.</div>\r\n<div><br>\r\n</div>\r\n<div>Cheers,</div>\r\n<div><br>\r\n</div>\r\n<div>Paul<br>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-19T15:50:06.877-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045807",
    "ThreadId": "443654",
    "Html": "Hi Paul,<br />\n<br />\nI admit to not yet being completely comfortable with Inversion of Control and MVC. I tend to get there, but not in a direct or completely planned fashion. That being said, there is nothing hidden or inaccessible behind IMapBoard* and it's abstract implementation <em>MapBoard</em>; so, I would rather include a bit more than necessary, than any bit too less. I appreciate your comments, and will take them under advisement.<br />\n<br />\nIPath2.TotalStesp is just the length, in steps, of the path. It is the one piece that may be unnecessary, so I will again consider it's real usefulness. As for the rest, I fully expect to use them in my game engine immediately upon generation of certain path types. Not every game will need them, but they are expensive to regenerate and cheap to store.<br />\n<br />\nThe second vector is absolutely required in my game engine, as I have will troop types with varying (and narrow) field-of-fire widths. There will be syntactic sugar methods for the simpler cases, but I am first looking at the base functionality that supports the rest. In fact, the supplied vectors would often have different lengths, quite legitimately; it is only the associated direction that is relevant here. The distance is explicitly provided in the method call. <br />\n<br />\nAs to the difference between a vector and a coordinate; A vector's magnitude doesn't change under transformation, while a coordinate's does. Consider a translation of the origin from (0,0) to (1,0). The vector (3,4) remains the vector (3,4), while the coordinate (3,4) becomes the coordinate 2,4). In that sense my <strong>IntVector2D</strong> type is really a <em>coordinate</em> type as used by <strong>Coords</strong> and company, not a true <strong>vector</strong> type.<br />\n",
    "PostedDate": "2013-05-19T17:01:04.503-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1045809",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">I follow the usefulness of the 2nd vector for the purposes of creating a narrow field, but I just don't think it belongs as an overload of the hexesInRadius method. Basically, the HexesInRadius method gives you a list of all the hexes in a circle.\r\n I (personally) would keep the two methods separate for the purpose of clarity. My personal style is to write what I call Kindergarten code. I try to keep everything as simple as possible to make it readily adoptable and maintainable by other developers.\r\n<div><br>\r\n</div>\r\n<div>Regarding IMapBoard - it's not that things are hidden, it's that it's performing tasks that are not necessary for the purposes of the Utility. The utility should be true to the data and it's methods. It should have nothing to do with the presentation.</div>\r\n<div><br>\r\n</div>\r\n<div>To be honest, your description of the differences between a vector and a coordinate only confused me further. ;) That being said, I'm also easily confused.</div>\r\n<div><br>\r\n</div>\r\n<div>Cheers,</div>\r\n<div><br>\r\n</div>\r\n<div>Paul<br>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-19T17:46:06.817-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046111",
    "ThreadId": "443654",
    "Html": "Hi,<br />\n<br />\nBeen running through your new &quot;split&quot; code ...<br />\n<br />\nOne thing that strikes me immediately is that the code to read the hotspot hex / mouse position still resides in the windows form &quot;HexGridPanel&quot;<br />\nI am thinking of the code below ...<br />\n<br />\nprotected ICoords GetHexCoords(Point point, Size autoScroll) {<br />\n<pre><code>  if( Host == null ) return HexCoords.EmptyCanon;\n\n  autoScroll = TransposeSize(autoScroll);\n\n  // Adjust for origin not as assumed by GetCoordinate().\n  var grid    = new Size((int)(GridSize.Width*2F/3F), (int)GridSize.Height);\n  var margin  = new Size((int)(MapMargin.Width *MapScale), \n                         (int)(MapMargin.Height*MapScale));\n  point      -= autoScroll + margin + grid;\n\n  return HexCoords.NewCanonCoords( GetCoordinate(matrixX, point), \n                                GetCoordinate(matrixY, point) );\n}</code></pre>\n\nShould this method not reside in the MapBoard class ?<br />\nI know its driven by the mouseover event on the form panel but I would have thought it was better to have this critical function in the actual utillity dll ?<br />\nIf its there - with appropriate parameters for the method call and fields added to the MapBoardClass that define the dimensions of the board - then this part is more generic and can be used for any implementation - as it stands it seems retrieving this piece of info is still tied too heavily to the visual part of the system and its pretty central to how everything works ....<br />\n<br />\nI guess this would mean moving IsTransposed and any other display based attribute.<br />\n",
    "PostedDate": "2013-05-20T10:40:07.363-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046174",
    "ThreadId": "443654",
    "Html": "It does seem to me on further inspection there are many items in the Hex grid panel that need to move to the mapboard  class for the utilities binary to be truly independent of the win forms display.<br />\n<br />\nPerhaps I am misunderstanding what is going on in the hex grid display class - but it seems to me that even with the new split - there is still code in the hex grid panel thats needed in the &quot;Utilities&quot; for it to work independently without writing a lot of bespoke code to support it ?<br />\n<br />\nI guess what I am trying to say is that the MapBoard class (or some other in the utilities should have a method called something akin to &quot;GetHexUnderCursor&quot;  which would accept an x and y point and then - based on other attributes already set for the class (margin, Hex dimensions etc ) be able to work it out  ....<br />\n<br />\nI of course may have posted the above before I have looked enough to fully understand - so forgive me if I have.<br />\n",
    "PostedDate": "2013-05-20T13:16:04.137-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046193",
    "ThreadId": "443654",
    "Html": "I must be getting close to a sweet spot; <em>Paul</em> argues that <strong>MapBoard</strong> be returned to <strong>HexGridPanel.dll</strong> and <em>dbeves</em> argues that <strong>MapBoard</strong> needs to be expanded where it is. <br />\n;-)<br />\nThat said, I agree that the hex-picking functionality belongs in <strong>HexUtilities.dll</strong>.  Let me think a bit on how best to do it.<br />\n",
    "PostedDate": "2013-05-20T14:01:15.383-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046242",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">As long as there is clear separation of concern, it all works. You just don't want to have to force users to make anything interface related if all they want is a set of hex related functions.\r\n<div><br>\r\n</div>\r\n<div>I've spent all day coding combat AI ... and I'm too tired to offer anything in the way of a deep opinion. :)</div>\r\n<div><br>\r\n</div>\r\n<div>Cheers,</div>\r\n<div><br>\r\n</div>\r\n<div>Paul<br>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-20T16:56:36.8-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046303",
    "ThreadId": "443654",
    "Html": "I have just posted what I think is a clean separation of concern, as Paul puts it. \r<br />\n<br />\nThe hex-picking and related functionality has been abstracted out of <strong>HexgridPanel</strong> and into new classes <strong>HexGrid</strong> and <strong>TranposedHexGrid</strong>. The interface <strong>IHexGridHost</strong> is what <strong>HexGridPanel</strong> in turn provides to enable that functionality.\r<br />\n<br />\nIn the same change set is an abstraction of the <strong>CustomCoords</strong> functionality out of <strong>Coord</strong>s and <strong>HexCoords</strong>. This now allows multiple custom coordinates instances as it is no longer static functionality in <strong>HexCoords</strong>.\r<br />\n<br />\nAs always, comments and suggestions welcome.<br />\n",
    "PostedDate": "2013-05-20T22:33:24.177-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046307",
    "ThreadId": "443654",
    "Html": "<strong>pgeerkens wrote:</strong><br />\n<blockquote>\nI have just posted what I think is a clean separation of concern, as Paul puts it. <br />\n<br />\nThe hex-picking and related functionality has been abstracted out of <strong>HexgridPanel</strong> and into new classes <strong>HexGrid</strong> and <strong>TranposedHexGrid</strong>. The interface <strong>IHexGridHost</strong> is what <strong>HexGridPanel</strong> in turn provides to enable that functionality.<br />\n<br />\nIn the same change set is an abstraction of the <strong>CustomCoords</strong> functionality out of <strong>Coord</strong>s and <strong>HexCoords</strong>. This now allows multiple custom coordinates instances as it is no longer static functionality in <strong>HexCoords</strong>.<br />\n<br />\nAs always, comments and suggestions welcome.<br />\n</blockquote>\nExcellent p, I have some time today so will give this a run through ...<br />\n",
    "PostedDate": "2013-05-20T22:42:19.333-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046508",
    "ThreadId": "443654",
    "Html": "<strong>pgeerkens wrote:</strong><br />\n<blockquote>\nI have just posted what I think is a clean separation of concern, as Paul puts it. <br />\n<br />\nThe hex-picking and related functionality has been abstracted out of <strong>HexgridPanel</strong> and into new classes <strong>HexGrid</strong> and <strong>TranposedHexGrid</strong>. The interface <strong>IHexGridHost</strong> is what <strong>HexGridPanel</strong> in turn provides to enable that functionality.<br />\n<br />\nIn the same change set is an abstraction of the <strong>CustomCoords</strong> functionality out of <strong>Coord</strong>s and <strong>HexCoords</strong>. This now allows multiple custom coordinates instances as it is no longer static functionality in <strong>HexCoords</strong>.<br />\n<br />\nAs always, comments and suggestions welcome.<br />\n</blockquote>\nHi p, I presume when you say uploaded you mean just on the Source Tab. The download zip files dont contain the new code ?<br />\n<br />\nAlso in the source code I cant find a Transposed Hexgrid class ... edit ...... Ah ... forget that its in the same file as hexgrid.<br />\n",
    "PostedDate": "2013-05-21T06:39:01.773-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046617",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">I hadn't realized that there was more new code uploaded. I took a quick look and I'm going to say that I still think that the MapDisplay holds too much base functionality. The fact that I want to work with a TerrainMap shouldn't tie me into having\r\n to use the MapDisplay class.\r\n<div><br>\r\n</div>\r\n<div>Consider this.</div>\r\n<div><br>\r\n</div>\r\n<div>Lets suppose that I have a battle map that is 100 x 100 hexes. Let's further suppose that my hex details are insanely complicated and terribly convoluted. It's so horrendous that I could never hope to integrate my mapping system with anybody else's map\r\n specific utility.</div>\r\n<div><br>\r\n</div>\r\n<div>However, let's assume that there is a utility that has nice basic features that I might be able to leverage. This utility tracks hexes with only the most basic information.</div>\r\n<div><br>\r\n</div>\r\n<div>Now, my samples below are extremely simplified and not necessarily well thought out. However, it illustrates the simplicity that needs to be presented to the client of the utility so that they can easily make use of it.</div>\r\n<div><br>\r\n</div>\r\n<div>There is no visual representation of anything. It's only business data and a set of rules that are implemented in the background. (I see that I don't have a path finding heuristic - which likely means I'm missing other things too...)</div>\r\n<div><br>\r\n</div>\r\n<div>Paul</div>\r\n<div><br>\r\n</div>\r\n<div>Class MapHex</div>\r\n<div>{</div>\r\n<div>public int X {get; set;}</div>\r\n<div>public int Y {get; set;}</div>\r\n<div>public int TerrainType {get; set;}</div>\r\n<div>}</div>\r\n<div><br>\r\n</div>\r\n<div>The utility also provides a GameBoard class that provides a set of simple methods to manage the map.</div>\r\n<div><br>\r\n</div>\r\n<div>Class GameBoard</div>\r\n<div>{</div>\r\n<div>public List&lt;MapHex&gt; Hexes {get; set;}</div>\r\n<div><br>\r\n</div>\r\n<div>public int StepCost(MapHex start, int direction)</div>\r\n<div>{</div>\r\n<div>... calculates the cost to move from one hex to another, possibly based on the target hex's terrain.</div>\r\n<div>}</div>\r\n<div><br>\r\n</div>\r\n<div>public int TerrainTypeCost (int TerrainType)</div>\r\n<div>{</div>\r\n<div>... returns the movement cost associated with a terrain type.</div>\r\n<div>}</div>\r\n<div><br>\r\n</div>\r\n<div>public bool TerrainBlocksLineOfSight(int TerrainType)</div>\r\n<div>{</div>\r\n<div>... returns true if the terrain blocks line of sight.</div>\r\n<div>}</div>\r\n<div><br>\r\n</div>\r\n<div>public List&lt;MapHex&gt; PathFinder(MapHex start, MapHex end)</div>\r\n<div>{</div>\r\n<div>... returns a list of hexes that is the cheapest movement cost from start to end</div>\r\n<div>}</div>\r\n<div><br>\r\n</div>\r\n<div>public List&lt;MapHex&gt; FieldOfView(MapHex pointOfView, int range)</div>\r\n<div>{</div>\r\n<div>... returns a list of hexes that can be seen from the pointOfView based on a range of int.</div>\r\n<div>}</div>\r\n<div><br>\r\n</div>\r\n<div>}</div>\r\n<div><br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-21T09:36:46.9-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046688",
    "ThreadId": "443654",
    "Html": "Hi P ...<br />\n<br />\nI kind of have your new code working - bar the fact there is a mismatch in the co-ordinates shown on my map<br />\n<br />\nOne question I have is around the GridSizeF property in the hex grid class - the code says this<br />\n<br />\n/// &lt;summary&gt;Scaled &lt;code&gt;Size&lt;/code&gt; of each hexagon in grid, being the 'full-width' and 'full-height'.&lt;/summary&gt;<br />\n<pre><code>SizeF   GridSizeF       { get; }\n</code></pre>\n\nWhich seems to suggest the property is defining the dimensions of the individual hex ? Is this correct ? If so - I presume this is the actual pixel width and height ? Again if so - for transposed grids is it measured the same way and the transposition takes care of this or do you have to set using the vertical pointing hex as opposed to the normal flat hex top.?<br />\n<br />\nI am also unsure about the &quot;Scaled&quot; part of the comment - if this is the actual pixel size of the hex then I would presume it wouldnt change and that the transformation would take care of the scaling of the hex size you are dealing with at any given level of zoom - perhaps I am misunderstanding what you mean by scaled ?<br />\n<br />\nJust that in your hexgrid panel project you set this <br />\n<br />\nSizeF   IHexGridHost.GridSizeF      { get { return Host.GridSize.Scale(MapScale); } } <br />\n<br />\nSo I am presuming the grid size for IMapDisplay is the same thing here ?<br />\n<br />\nAlso - what does the <br />\n<br />\nGetClipCells funtion do ? I have an idea that it represents the actual visible rectangle of the viewable map ?<br />\n<br />\nFor what its worth - whilst as he says its simplistic for clarity - I would have to agree that pauls post above  is the model for a utility library that someone can pick up and use I would aim for ... unless you are going to write reams of documentation the target should be to provide a set of functions that do a specific job and any dependemt code hidden within the class so that one method provides the result for the funtionality the user requires.<br />\n<br />\nSomething like this ...<br />\n<br />\npublic List&lt;MapHex&gt; FieldOfView(MapHex pointOfView, int range)<br />\n{<br />\n... returns a list of hexes that can be seen from the pointOfView based on a range of int.<br />\n}<br />\n<br />\nis easy for someone just to work out what it is and how to use it - with a single comment line... (or even without)<br />\n",
    "PostedDate": "2013-05-21T12:32:18.933-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046786",
    "ThreadId": "443654",
    "Html": "Well ... Success - now implemented and seems to be reading the Co-ordinates perfectly ...<br />\nMy main issues were defining the hex size in its transposed form rather than standard orientation and letting the transposed hexgrid do the work.<br />\nSecondly - it was the actual measurement - ie what width and height were - following your drawing code in hex grid panel I managed to figure out what you were doing.<br />\n<br />\nI think also you have to define a fractional value for the grid sizes if you are not using a predifined hex size (I had the hex layer graphically already) - where as in your code you obviously chose dimensions that divided exactly for the drawing process.<br />\n",
    "PostedDate": "2013-05-21T16:08:35.533-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046793",
    "ThreadId": "443654",
    "Html": "One thing I would suggest to add to hex grid or wherever - is a Margin that doesnt get scaled in the tranformation.<br />\nMost maps will be sitting on screen with a UI around it that of course wont be scaled - the current map margin gets scaled.<br />\n<br />\nAlso with regard to the margin thats there - if I am using a transposed hex grid I have to set this<br />\n<br />\npublic Size MapMargin<br />\n<pre><code>    {\n        get { return new Size(40,150); }\n    }\n</code></pre>\n\n150 is actually the width of the margin - so it seems I also have to swap these if the map is not standard - which is a little counter intuitive.<br />\n<br />\nAlso - I cant quite figure out if the scaling is implemented in the new split code it would seem it would need to scale the individual hex dimensions here ? But doesnt seem to account for the host scale setting ...<br />\n<br />\npublic virtual ICoords GetHexCoords(Point point, Size autoScroll) {<br />\n<pre><code>  if( Host == null ) return HexCoords.EmptyCanon;\n\n  // Adjust for origin not as assumed by GetCoordinate().\n  var grid    = new Size((int)(Host.GridSizeF.Width*2F/3F), (int)Host.GridSizeF.Height);\n  var margin  = new Size((int)(Host.MapMargin.Width  * Host.MapScale), \n                         (int)(Host.MapMargin.Height * Host.MapScale));\n  point      -= autoScroll + margin + grid;\n\n  return HexCoords.NewCanonCoords( GetCoordinate(matrixX, point), \n                                   GetCoordinate(matrixY, point) );\n}\n</code></pre>\n\nedit ... am I correct in presuming this is what doest the Hex dimension scaling  in your panel example?<br />\n<br />\nSizeF   IHexGridHost.GridSizeF      { get { return Host.GridSize.Scale(MapScale); } }<br />\n<br />\nI think this should happen by default in the hexgrid class - I cant think of a situation where the map is scaled in some way and you would not want to scale the hex dimensions ...?<br />\n",
    "PostedDate": "2013-05-21T16:39:24.46-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046794",
    "ThreadId": "443654",
    "Html": "@dbeves: Glad to hear that you sorted that out; I have been paring down abstract class <strong>MapBoard</strong>, quite successfully I think; more below.  As I am creating my maps from tiles, the dimensions are always exact integers. However, I believe it is most efficient to have the graphics perform the scaling once, after the map is drawn 1-to-1. That is what I do for the mouse-wheel-zooming in the example. \r<br />\n<br />\nHere is the new abstract <strong>MapBoard</strong> class, and helpers<br />\n<pre><code>  public abstract class MapBoard : IMapBoard {\n    public MapBoard(Size sizeHexes) { SizeHexes = sizeHexes; }\n\n    ///&lt;inheritdoc/&gt;\n    public          int        FovRadius      { get; set; }\n\n    ///&lt;inheritdoc/&gt;\n    public virtual  Size       SizeHexes      { get; private set; }\n\n    /// &lt;summary&gt;Returns this instance as a &lt;c&gt;IFovBoard&lt;IGridHex&gt;&lt;/c&gt;.&lt;/summary&gt;\n    public IFovBoard&lt;IGridHex&gt; FovBoard       { get { return this; } }\n\n    /// &lt;summary&gt;Returns this instance as a &lt;c&gt;INavigableBoard&lt;/c&gt;.&lt;/summary&gt;\n    public INavigableBoard     NavigableBoard { get { return this; } }\n\n    ///&lt;inheritdoc/&gt;\n    public virtual  int    Heuristic(int range) { return range; }\n\n    ///&lt;inheritdoc/&gt;\n    public          bool   IsOnBoard(ICoords coords)  {\n      return 0&lt;=coords.User.X &amp;&amp; coords.User.X &lt; SizeHexes.Width\n          &amp;&amp; 0&lt;=coords.User.Y &amp;&amp; coords.User.Y &lt; SizeHexes.Height;\n    }\n\n    ///&lt;inheritdoc/&gt;\n    public virtual  bool   IsPassable(ICoords coords) { return IsOnBoard(coords); }\n\n    ///&lt;inheritdoc/&gt;\n    public abstract int    StepCost(ICoords coords, Hexside hexSide);\n\n    ///&lt;inheritdoc/&gt;\n    IGridHex IFovBoard&lt;IGridHex&gt;.this[ICoords coords]  { get { return GetGridHex(coords); } }\n\n    /// &lt;summary&gt;Returns the hex at coordinates specified by &lt;c&gt;coords&lt;/c&gt;.&lt;/summary&gt;\n    protected abstract IGridHex GetGridHex(ICoords coords);\n  }\n\n  public static partial class Extensions {\n    /// &lt;summary&gt;Returns the field-of-view on &lt;c&gt;board&lt;/c&gt; from the hex specified by coordinates &lt;c&gt;coords&lt;/c&gt;.&lt;/summary&gt;\n    public static IFov GetFov(this IFovBoard&lt;IGridHex&gt; @this, ICoords origin) {\n      return FieldOfView.GetFieldOfView(@this,origin);\n    }\n\n    /// &lt;summary&gt;Returns the field-of-view from this hex.&lt;/summary&gt;\n    public static IFov GetFov(this IGridHex @this) {\n      return FieldOfView.GetFieldOfView(@this.Board, @this.Coords);\n    }\n\n    /// &lt;summary&gt;Returns a least-cost path from the hex &lt;c&gt;start&lt;/c&gt; to the hex &lt;c&gt;goal.&lt;/c&gt;&lt;/summary&gt;\n    public static IPath2 GetPath(this INavigableBoard board, ICoords start, ICoords goal) {\n      return PathFinder2.FindPath(start, goal, board);\n    }\n\n    /// &lt;summary&gt;Returns a least-cost path from this hex to the hex &lt;c&gt;goal.&lt;/c&gt;&lt;/summary&gt;\n    public static IPath2 GetPath(this IGridHex @this, ICoords goal) {\n      return PathFinder2.FindPath( @this.Coords, goal, @this.Board);\n    }\n  }</code></pre>\n\nand the new abstract class <strong>GridHex</strong> to accompany it:<br />\n<pre><code>  public abstract class GridHex : IGridHex {\n    public GridHex(IBoard&lt;IGridHex&gt; board, ICoords coords) { \n      Coords = coords; \n      Board  = board;\n    }\n\n    ///&lt;inheritdoc/&gt;\n    public virtual  IBoard&lt;IGridHex&gt; Board          { get; private set; }\n\n    ///&lt;inheritdoc/&gt;\n    public virtual  ICoords          Coords         { get; private set; }\n\n    ///&lt;inheritdoc/&gt;\n    public virtual  int              ElevationASL   { get; protected set; }\n\n    ///&lt;inheritdoc/&gt;\n    public virtual  int              HeightObserver { get { return ElevationASL + 1; } }\n\n    ///&lt;inheritdoc/&gt;\n    public virtual  int              HeightTarget   { get { return ElevationASL + 1; } }\n\n    ///&lt;inheritdoc/&gt;\n    public abstract int              HeightTerrain  { get; }\n\n    ///&lt;inheritdoc/&gt;\n    public int                       Range(ICoords target) { return Coords.Range(target); }\n\n    ///&lt;inheritdoc/&gt;\n    public abstract int              StepCost(Hexside direction);\n  }\n</code></pre>\n\nWith the extension methods, I think this addresses Paul's points.<br />\n\r<br />\nHaving additional eyes to point out one's forgotten assumptions is great; thank you both once again. I will post refreshed downloads a bit later this evening.<br />\n",
    "PostedDate": "2013-05-21T16:44:01.937-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1046850",
    "ThreadId": "443654",
    "Html": "The refactoring continued, and continued, and the surface area of the external interface kept shrinking. I finished up by renaming the key externally visible classes to be:<br />\n<ul>\n<li><strong>Hex</strong> (renamed from GridHex), </li>\n<li><strong>HexBoard</strong> (renamed from MapBoard),</li>\n<li><strong>HexCoords</strong>,</li>\n<li><strong>HexGrid</strong>, and</li>\n<li>\n(for the <strong>WinForms</strong> users) <strong>HexgridPanel</strong>.<br />\n</li>\n</ul>\nEven that pesky <em>GetClipCells()</em> method retreated back under the covers where it belonged.<br />\n<br />\n<strong>@dbeves</strong>: Regarding your suggestion for a non-scaling MapMargin; try adding this definition to your sub-class:<br />\n<pre><code>Size IHexGridHost.MapMargin { \n  get { return Size.Round(MapMargin.Scale(1.0F / MapScale)); } \n}\n</code></pre>\n\nSource and Binaries available as download V 5.1<br />\n",
    "PostedDate": "2013-05-21T21:47:00.343-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047014",
    "ThreadId": "443654",
    "Html": "Great - I will give the new code and your suggestion a try ....<br />\n",
    "PostedDate": "2013-05-22T03:57:38.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047062",
    "ThreadId": "443654",
    "Html": "One thing I believe the library is missing is a method to convert a Canon co-ordinate for example back to a relevant x,y screen position. Say the hex centre<br />\n<br />\nSay for example if you wanted a graphical outline for the hot spot hex to appear when you clicked on a particular hex.<br />\n",
    "PostedDate": "2013-05-22T05:28:08.313-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047197",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">I've had a chance to look at the new setup for a while.\r\n<div><br>\r\n</div>\r\n<div>I'm still thinking that the organization might be amiss, unless I'm starting from the wrong spot.</div>\r\n<div><br>\r\n</div>\r\n<div>I'm looking at the HexBoard as being the primary domain infrastructure.</div>\r\n<div><br>\r\n</div>\r\n<div>In my mind, I am going to build my &quot;map world&quot; on this abstract class. However, I don't see any place in the class to store my actual map data (the actual graph of hexes). They way this is set up, the data is external to the class, but the class provides\r\n methods that are acting on the data.</div>\r\n<div><br>\r\n</div>\r\n<div>Also, I'm not sure why this class needs to be defined as abstract. Doing this forces me to write code to create a class that should be performing the functionality that the utility is providing to me. Ideally, the utility should work out of the box, providing\r\n it's base feature set. Everything it does should be extensible or exposed, allowing me to override the methods - but they should otherwise be standalone functional.</div>\r\n<div><br>\r\n</div>\r\n<div>Does it not make sense that I should be able to do this:</div>\r\n<div><br>\r\n</div>\r\n<div>var myMap = new HexBoard(100, 100);</div>\r\n<div>myMap.HexSet = MyUserFunctions.GenerateHexMapData();</div>\r\n<div>var fov = myMap.GetFieldOfView(sourceCoords, myRangeValue);</div>\r\n<div>var bestPath = myMap.GetPath(sourceCoords, destinationCoords);</div>\r\n<div>var hasLineOfSight = <span style=\"font-size:12pt\">myMap.HasLineOfSight(sourceCoords, destinationCoords);</span></div>\r\n<div><br>\r\n</div>\r\n<div>If it worked this way, the only knowledge the user *must* have is to know/understand what the definition of the hex class is so that they can generate the hex data for the map itself.</div>\r\n<div><br>\r\n</div>\r\n<div>Another small note - I would remove the use of the Size class in the HexBoard. It's forcing the loading of the System.Drawing library. Since this class is purely Model only, it shouldn't need anything visual. If it has no visual components, there is no\r\n need for the drawing library.</div>\r\n<div><br>\r\n</div>\r\n<div>I don't think FovRadius is needed as a property of HexBoard. It's only needed for the FoV method and it can be passed in as a parm.</div>\r\n<div><br>\r\n</div>\r\n<div>I don't think SizeHexes belongs here since it's only meaningful for the UI. Since this has no UI component, it's not adding any meaningful content.</div>\r\n<div><br>\r\n</div>\r\n<div>I don't follow why you want to have FovBoard and NavigableBoard as properties of the HexBoard.</div>\r\n<div><br>\r\n</div>\r\n<div>I would also move the Range and StepOut methods away from the ICoords interface and put them in HexBoard. In my opinion, a class should never have functionality that relies on external data. The idea of distance/cost between hexes is relative to the board\r\n the hexes are on and not to the hex itself. </div>\r\n<div><br>\r\n</div>\r\n<div>While I'm being picky, I would suggest adding a new folder under HexUtilities called Interfaces and store your interfaces there, with one interface per file. It just makes them easier to locate. As it is now you have some of them grouped in an Interfaces.cs\r\n file and others in named files (ICoords.cs and IHeap.cs).</div>\r\n<div><br>\r\n</div>\r\n<div>I hope these comments are helpful and not just annoying.</div>\r\n<div><br>\r\n</div>\r\n<div>Cheers,</div>\r\n<div><br>\r\n</div>\r\n<div>Paul</div>\r\n<div><br>\r\n</div>\r\n<div><br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-22T09:19:36.937-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047282",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">After giving it more thought, I might choose to withdraw my objection to the StepOut method being in the ICoordinates interface. Inasmuch as I think it could easily live in the &quot;map&quot; class, it does have value in the ICoordinates interface as\r\n well as long as it's used to reference internal properties of the class and not to reference the map data that the coordinates exist in.\r\n<div><br>\r\n</div>\r\n<div>Cheers,</div>\r\n<div><br>\r\n</div>\r\n<div>Paul<br>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-22T10:52:27.347-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047409",
    "ThreadId": "443654",
    "Html": "@Paul:\r<br />\n<br />\nThe answers may be annoying, but the comments aren't. You are simply forcing me to write my design notes.  ;-)<br />\n<ol>\n<li><strong>Hexboard</strong> is abstract because the method  <code>protected abstract IHex GetGridHex(ICoords coords);</code>  is abstract. It is here that the storage of hex details is exposed. A basic sub-classing would look like this:</li>\n</ol>\n<pre><code>public abstract class MapDisplay : HexBoard {\n  public MapDispay(Size sizeHexes) : base (sizeHexes) {\n    /* define stuff here */\n  }  \n  private HexGrid[][] Board;\n\n  protected override IHex GetGridHex(ICoords cords) { \n    return Board[coords.y][coords.X];\n}</code></pre>\n\n<ol>\n<li>All the methods except  <code>GetGridHex</code>  <strong>are</strong> standalone; other than values being assigned to the properties and defining the board storage, the class is ready to go. It surely would be presumptive for the library to mandate how the class stores hexes; for instance the map might have corners cut out! Check out how I create <strong>Hex</strong> objects on the fly in <strong>TerrainMap.GetGridHex</strong>, for a simple way to manage small maps.</li>\n<li>The  <code>Size</code> class is used everywhere (122 separate instances) in the implementation; I would simply have to muddy my code to rewrite it if I took it out. It also has a useful property of being able to be added to a Point, which a Point cannot do out of the box. Blame Bill.</li>\n<li>To my mind current visibility (ie FovRadius) is a state of the game, and hence <strong>must</strong> be in  <code>HexBoard</code>. If you need to explicitly control Visibility Range, you always have access to the second overload of  <code>GetFieldOfView()</code>.</li>\n<li>You are misinterpreting <strong>SizeHexes</strong>; it is the board dimensions in units of hexes.  Caching of SizeHexes is impled by default, as it is used frequently in GetPath, but this could be overriden easily if desired (check out MapDisplay for how to do this).The hex dimensions are in GridSize and are only passed in to HexGrid, where they are of course required to do hex picking.</li>\n<li><strong>Range</strong> is purely a calculation on the coordinate system. It is exposed by <strong>Hex</strong> but is really a property of each <strong>Hex`s</strong> ICoords property.</li>\n<li>You may have a simpler terrain model, but my game engine needs the polymorphism enabled by putting StepCost in the hexes.</li>\n<li>\nThe current arrangement of interface locations is unsuitable for the long term. I had not thought of a separate directory, but that might work.it; it might work. I usually try to defin interfaces where they are needed, but then I grouped them to allow you and <strong>dbeves</strong> to find them more easily during the refactoring; I guess that didn't work.<br />\n</li>\n</ol>\nP.S. I have tried to be uniform in my use of terminology, but if you spot any possibilities for better names please let me know. Now is the time to do it.<br />\n",
    "PostedDate": "2013-05-22T15:25:41.137-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047634",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">\r\n<div>Hi Pieter,</div>\r\n<div><br>\r\n</div>\r\nRegarding the SizeHexes class - I'm not sure what I was looking at when I suggested it had embedded UI content. It may have been the MapDisplay class I was looking at - which is okay to have UI content since it's a part of the UI project.\r\n<div><br>\r\n</div>\r\n<div>Or were you referring to some other part of my previous post (or the whole post entirely). :)<br>\r\n<div><br>\r\n</div>\r\n<div><span style=\"font-size:12pt\">Paul</span></div>\r\n<div><br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-23T04:04:36.64-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047642",
    "ThreadId": "443654",
    "Html": "Paul:\r<br />\nNo, I referred to your 7:22 pm post yesterday, which was just a copy of mine an hour earlier.\r<br />\n<br />\nPieter<br />\n",
    "PostedDate": "2013-05-23T04:28:21.943-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047647",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">Well that's odd. I didn't post that (at least not intentionally). Here is what I tried to post:\r\n<div><br>\r\n</div>\r\n<div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\">I'm not sure if this is just an example, but the example of your abstract MapDisplay is forcing the HexBoard to be used as a user interface component.</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\"><br>\r\n</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\">I'm also not sure why I used SizeHexes as the example of UI content infiltrating the utilities. I don't actually see what it was I was referring to now. I should try to remember to cut-paste\r\n my examples. ;)</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\"><br>\r\n</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\">I follow what you're referring to with Visibility Range. In my case, the visibility range of units changes from unit to unit. Further, in my case, the weapons that the units are wielding have\r\n varying ranges. For the sake of knowing what is visible, I need to know what is visible and what is in range. That being said, I follow where you're going now with your implementation.</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\"><br>\r\n</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\">My objection to the use of the Size class is only because it forces the use of a library that the utilities don't need. The fact that they're being leveraged beyond the utility makes sense,\r\n but that's not a good reason to use it. (That might sound harsher than intended.) What I'm meaning with that is that it's an example of separation of concern. A class that implies presentation is sneaking into a model that should have no visual aspect.</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\"><br>\r\n</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\">The terrain model I'm using is reasonably simple, but but it creates complexity because the units each interpret their environment differently. This is why (for me) I need to be able to talk\r\n to the utility in a simple manner so that each unit can manage themselves in a timely manner. If the utility has too much complexity and weight, it won't work for me.</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\"><br>\r\n</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\">That being said, if my needs don't fit well with how you'd like the utility to work, I'd be happy to share my version of the methods if you can help me work my way through your code.</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\"><br>\r\n</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\">Cheers,</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\"><br>\r\n</div>\r\n<div style=\"line-height:21px; color:rgb(68,68,68); font-size:15px\">Paul </div>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-23T04:31:36.66-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047842",
    "ThreadId": "443654",
    "Html": "Hi P,<br />\n<br />\nOne issue that seems apparent to me is that there seems to be no allowance for transposed grids in the Coords class - if you take the example below ...<br />\n<br />\nif (hexGrid.HotSpotHex.Canon.Y % 2 != 0)<br />\nor<br />\nif (hexGrid.HotSpotHex.Canon.X % 2 != 0)<br />\n<br />\nI am using this as a test to check an odd numbered Y row on a transposed grid so I can deduct the appropriate position x value to display an outline around the hex. I use this to deduct from the hex center method to find the hex center of an odd numbered board row ... (this would also be useful to include)<br />\n<br />\nNow - using Canon.Y does not work - as that actually appears to be the X coordinate on a transposed board so substituting .X does work as this actually seems to be the Y co-ordinate.<br />\n<br />\n<br />\nThis makes using any Co-ords confusing - so perhaps there needs to be something that checks within the Coords class to see if its operating on a transposed board. Havent thought enough about where or how it should go - but using any co-ords is not intuitive on a transposed board at the moment.<br />\n",
    "PostedDate": "2013-05-23T09:53:32.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047979",
    "ThreadId": "443654",
    "Html": "<strong>@Paul</strong>: <br />\nUnfortunately there is other stuff in <strong>System.Drawing.dll</strong> that <strong>HexUtility</strong> uses; it should really be termed <strong>System.Geometry.dll</strong>. \r<br />\n<br />\nIs the variable visibility of your units associated with their height? If so, basing ObserverHeight on the unit in a hex may have the effect you desire. That is (part of) how I am implementing variable sightlines.\r<br />\n<br />\nYes, I would be pleased to help out with interpreting the model for your needs. I might see appropriate ways to further generalize <strong>HexUtility.dll</strong> when I see specific cases of the issues you are encountering. Let's start another thread for that however.<br />\n",
    "PostedDate": "2013-05-23T14:41:01.58-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047980",
    "ThreadId": "443654",
    "Html": "<strong>@dbeves</strong>: The idea of the transposition was to make it completely transparent to the client; now you want to poke around inside!<br />\n ;-)<br />\n\r<br />\nHave you considered using a <strong>CustomCoords</strong> as a model for a sub-class of <strong>HexCoords</strong> that puts the User coordinates back. Just overriding the <strong>User</strong> property with the definition of <strong>Custom</strong> in <strong>CustomCoords</strong> should do it, with an off-diagonal transformation matrix like this : 0,1, 1,0, 0,0<br />\n",
    "PostedDate": "2013-05-23T14:44:30.183-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047981",
    "ThreadId": "443654",
    "Html": "Perhaps I am misunderstanding how you have viewed the co-ord numbering system ?<br />\n<br />\nIn normal layout the top left will be x=0 y=0 - when using a transposed grid perhaps you do not maintain this - ie do you simply flip the board 90 degrees to the left but maintain the same numbering system ie on a transposed board the x values would then represent the vertical as opposed to the horizontal ?<br />\n<br />\nI just caught your last post ... it sounds as if that is correct ...?  I will look into what you say - I think I took for granted the word trasnpose was doing more than it is ...<br />\n",
    "PostedDate": "2013-05-23T14:47:18.303-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047983",
    "ThreadId": "443654",
    "Html": "<strong>pgeerkens wrote:</strong><br />\n<blockquote>\n<strong>@dbeves</strong>: The idea of the transposition was to make it completely transparent to the client; now you want to poke around inside!<br />\n ;-)<br />\n<br />\nHave you considered using a <strong>CustomCoords</strong> as a model for a sub-class of <strong>HexCoords</strong> that puts the User coordinates back. Just overriding the <strong>User</strong> property with the definition of <strong>Custom</strong> in <strong>CustomCoords</strong> should do it, with an off-diagonal transformation matrix like this : 0,1, 1,0, 0,0<br />\n</blockquote>\nI think the issue here P is that someone using the library would expect the co-ordinate system to remain the same whether the board was transposed or not ... ie the X co-ord as presented by the GetHexCoOrd method should represent the horizontal in either case ... <br />\n<br />\nI think in more general use there will be many instances where someone using it will need to retrive a hex co-ord to use in functionality outside of the library functions.<br />\n<br />\nI will look at what you said in your post above to see if I can figure out a solution.<br />\n",
    "PostedDate": "2013-05-23T14:53:01.94-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1047992",
    "ThreadId": "443654",
    "Html": "<strong>@dbeves</strong>: I whipped off transposition quickly, and don't use it myself. I will look at it over the next day or two, so please let me know any further thoughts you have on it.<br />\n",
    "PostedDate": "2013-05-23T15:08:59.517-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1048000",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">As far as I can tell, all of the places you're using the Drawing library is to provide visual content from the utility.\r\n<div><br>\r\n</div>\r\n<div>For example, the HexGrid class is only being used by HexPanel, which is a UI component.</div>\r\n<div><br>\r\n</div>\r\n<div>The only place where the these drawing features might come into play is with the FoV and line of sight algorithms. I haven't really looked into that code very deeply though, so I'm not sure.</div>\r\n<div><br>\r\n</div>\r\n<div>Regarding my units variable visibility: the game I'm working on is fantasy based. An example of my features is that units can create barriers that present cover to friendly units, but they don't impede their view of enemies. So, for any enemies the hexes\r\n with the barriers block line of sight. For all friendly units, the barriers can be considered as &quot;not there&quot;.</div>\r\n<div><br>\r\n</div>\r\n<div>I have intentionally left out height line of sight issues for now. Things are either blocked or they're not. Once I get the rest of my mechanics working, I'll start looking into elevation and unit sizes. However, if I can use your utility to integrate\r\n those features right away - I'll be that much further ahead.</div>\r\n<div><br>\r\n</div>\r\n<div>I'll see if I can start a general usage questions thread. I'm very new to this board, so I'm not sure what I can do and/or how to do it (yet).</div>\r\n<div><br>\r\n</div>\r\n<div>On a side note ... I think I've decided that you're an evil genius. I was comparing your path finding code to Eric Lippert's. Your changes are very interesting, but the reasoning behind them is well beyond my mathematics skill level. Kudos.</div>\r\n<div><br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-23T15:38:46.663-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1048010",
    "ThreadId": "443654",
    "Html": "Just to interject ... the Hex Grid alss contains several important methods for managing the hex grid ... such as the items we are discussing above<br />\n",
    "PostedDate": "2013-05-23T16:11:42.767-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1048012",
    "ThreadId": "443654",
    "Html": "<strong>pgeerkens wrote:</strong><br />\n<blockquote>\n<strong>@dbeves</strong>: I whipped off transposition quickly, and don't use it myself. I will look at it over the next day or two, so please let me know any further thoughts you have on it.<br />\n</blockquote>\nP, I have created a new thread for the transposed board issues - I will post any comments beyond that I have already made in there.<br />\n",
    "PostedDate": "2013-05-23T16:13:54.913-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1048018",
    "ThreadId": "443654",
    "Html": "\r\n<div dir=\"ltr\">I don't doubt that there is a lot of useful utility functionality in the HexGrid. I'm not trying to beat a dead horse, but there needs to be a clear separation between the business model and presentation features.\r\n<div><br>\r\n</div>\r\n<div>I fear though that the two are so tightly coupled that decoupling them may result in a major refactoring.</div>\r\n<div><br>\r\n</div>\r\n<div>Cheers,</div>\r\n<div><br>\r\n</div>\r\n<div>Paul<br>\r\n<br>\r\n<div>\r\n<hr id=\"stopSpelling\">\r\n</div>\r\n</div>\r\n</div>\r\n",
    "PostedDate": "2013-05-23T16:56:56.667-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1048024",
    "ThreadId": "443654",
    "Html": "<strong>PaulMouchet wrote:</strong><br />\n<blockquote>\nI don't doubt that there is a lot of useful utility functionality in the HexGrid. I'm not trying to beat a dead horse, but there needs to be a clear separation between the business model and presentation features.   I fear though that the two are so tightly coupled that decoupling them may result in a major refactoring.   Cheers,   Paul<br />\n</blockquote>\nSorry - I probably didnt say the original strongly enough. I dont think there is any fat in the hex grid class - all that is there is pertinent to managing a hex board. A couple of the fields could appear  as relating to visual (such as scroll position - still trying to work out exactly how to use that ) but they are more related to non visual functionality.<br />\n",
    "PostedDate": "2013-05-23T17:23:28.25-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "1076243",
    "ThreadId": "443654",
    "Html": "Latest release includes code documentation generated by Doxygen, including class diagrams. Only about half the methods have summaries so far, and few have more than that, but it is a start.<br />\n",
    "PostedDate": "2013-08-02T23:54:32.89-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]